# Vision for chartr.ai

## What
- chartr.ai is AI that charts out life for you
- Charts are super effective ways to consume + share information
- Does not aim to replace rich web apps and their custom UIs - but rather supplements
- Chartrs are handy units (of memory? or prompts?) to use as an input for other LLMs - templates and base boards?
- Examples:
  - BCG Matrix to look at the market competitor dynamics
  - AirBnB chart for travellers with kids

## Why
- Walls of text are not the best to read and share - need something
- More relevant in the age of Augment Reality (AR)
- People can think better visually

## How
- Make it yours - create your own customised chartrs
- A chartr = specified chart(s) using specified tool(s) triggered on specified input(s)
- Examples:
  - MKBHD YouTube phone review -> phone chart template
  - Draft of my article -> Strengths/weaknesses analysis
  - Airbnb I am looking at -> analysis for my situation

## Where
- Use it on chartr.ai for a sleek charting UX
- Via API
- API can be via an MCP server for LLMs
- Plugins e.g. Zapier, Notion, ChatGPT

## Who
- Visual learners
- Geeks
- Content creators (including education)
- People who want to save time (TLDR)


# Development Environment

## Framework and Tools
- Nuxt
- Nuxt UI
- Vercel AI SDK
Refer to their uploaded Custom Docs for more details

## Language

# Frontend (Nuxt)
- No need to import basic Vue utilities (e.g., ref, computed)
- Nuxt has auto-imports for components, composables, utils 
- When composing components, use provide/inject patterns for passing data to deeply nested components:
  ```javascript
  // In parent component
  provide('key', value)
  
  // In any child component (no matter how deeply nested)
  const value = inject('key', defaultValue)
  ```

# Server-Side Operations

## Vercel AI SDK
- For operations like `generateObject`, `aiToEventStream`, etc., convert messages to core messages:
  ```javascript
  import { convertToCoreMessages, tool } from 'ai'
  ```

## Supabase Javascript Client
- Use the following helpers for Supabase operations:
  ```javascript
  import { serverSupabaseClient, serverSupabaseUser } from '#supabase/server'

  const user = await serverSupabaseUser(event)
  const supabase = await serverSupabaseClient(event)
  ```

## Nitro (backend for Nuxt FE)
- To get router parameters:
  ```javascript
  const someParam = getRouterParam(event, 'someParam')
  const { param1, param2 } = getQuery(event)
  ```
etc.

- This is an example of how eventStream/Server sent events work in Nitro

```javascript
export default defineEventHandler(async (event) => {
  const eventStream = createEventStream(event)

  const interval = setInterval(() => {
    eventStream.push({
      event: 'message',
      data: JSON.stringify({
        foo: 'bar',
      }),
    })
  }, 1000)

  setTimeout(() => {
    clearInterval(interval)
    eventStream.close()
  }, 5000)

  return eventStream.send()
})
```

## Postgres and Supabase
- use security invoker with creating view
- to create a new migration: supabase migration new <name>
- to apply migrations: supabase db push
